import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 11
        versionCode 1000
        versionName "1.0.0.0"
        ndk {
            moduleName "FFPlayer"
            stl "stlport_static"
            cFlags "-std=gnu++11 -DGL_GLEXT_PROTOTYPES"
            abiFilters "armeabi", "armeabi-v7a"
            String basePath = new File("./").canonicalPath + "/ffplaylib/src/main/jniLibs/armeabi/"
            String libavcodec =  basePath + "libavcodec-54.so"
            String libavdevice = basePath + "libavdevice-54.so"
            String libavfilter = basePath + "libavfilter-3.so"
            String libavformat = basePath + "libavformat-54.so"
            String libavutil = basePath + "libavutil-51.so"
            String libswresample = basePath + "libswresample-0.so"
            String libswscale = basePath + "libswscale-2.so"
//            String libSDLMain = basePath + "libmain.so"
//            String libSDL = basePath + "libSDL2.so"

            ldLibs "log","GLESv2","dl", "GLESv1_CM","GLESv2", "android",libavcodec, libavdevice, libavfilter, libavformat, libavutil,libswresample,libswscale
//          ldLibs "log", "-Lsrc/main/jni/ffmpeg/ffmpeg"
//            ldLibs "log", "avcodec", "avformat", "avutil"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jni.srcDirs  "src/main/jni", "src/main/jni/include","src/main/jni/include/libavcodec","src/main/jni/include/libavdevice","src/main/jni/include/libavfilter",
                    "src/main/jni/include/libavformat","src/main/jni/include/libavutil","src/main/jni/include/libswresample",
                    "src/main/jni/include/libswscale", "src/main/jni/SDL", "src/main/jni/SDL/include"
            jniLibs.srcDirs "src/main/jinLibs"
        }
    }
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn ndkBuild
//    }
}

def getNdkBuildFullPath() {
    if (hasProperty('ndk.command')) {
        return property('ndk.command')
    }
    if (hasProperty('ndk.path')) {
        def path = property('ndk.path')
        if (!path.endsWith(File.separator)) {
            path += File.separator
        }
        return path + getNdkBuildName()
    }
    return getNdkBuildName()
}

def getNdkBuildName() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "ndk-build.cmd"
    } else {
        return "ndk-build"
    }
}

task ndkBuild(type: Exec) {
    commandLine getNdkBuildFullPath(),
            'NDK_OUT=' + temporaryDir,
            '-C', file('src/main/jni').absolutePath
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
}
